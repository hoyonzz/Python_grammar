{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "private_outputs": true,
      "provenance": [],
      "authorship_tag": "ABX9TyNKa+2IQjekmmgqoogqV9A1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hoyonzz/Python_grammar/blob/main/%ED%95%A8%EC%88%98\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 내장 함수\n",
        "# abs : ㅈ절대값을 돌려주는 함수\n",
        "print(abs(3))\n",
        "print(abs(-3))\n",
        "print(abs(-1.2))"
      ],
      "metadata": {
        "id": "263IPW4ghA5i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# all : 반복가능한 자료형 x를 입력 인수로 받으며, 이 x가 모두 참이면 True, 하나라도 거짓이면 False\n",
        "print(all([1,2,3]))\n",
        "print(all([1,2,3,0]))"
      ],
      "metadata": {
        "id": "czqLjck8mj7l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# any : 하나라도 참이 있으면 True, 모두 거짓이면 False\n",
        "print(any([1,2,3,0]))\n",
        "print(any([0, '']))"
      ],
      "metadata": {
        "id": "-R8i_O0EnAsy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# chr : 아스키코드 값을 입력받아 그 코드에 해당하는 문자를 출력\n",
        "print(chr(97))\n",
        "print(chr(48))"
      ],
      "metadata": {
        "id": "lqKfdwANnM7D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# dir : 객체가 자체적으로 가지고 있는 변수나 함수를 보여준다.\n",
        "print(dir([1,2,3]))\n",
        "print(dir({'1':'a'}))"
      ],
      "metadata": {
        "id": "MikfR_8RnVux"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# divmod : 2개의 숫자를 입력받아 a를 b로 나눈 몫과 나머지를 튜플 형태로 돌려준다\n",
        "print(divmod(7, 3))"
      ],
      "metadata": {
        "id": "fIFo5DV4neJt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# enumerate : 순서가 있는 자료형을 입력으로 받아 인덱스 값을 포함한 enumerate 객체를 돌려준다.\n",
        "arr = ['a', 'b', 'c' ,'d']\n",
        "for idx, alpha in enumerate(arr):\n",
        "    print(idx, alpha)"
      ],
      "metadata": {
        "id": "01OjePjO25KT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# eval : 실행 가능한 문자열을 입력으로 받아 문자열을 실행한 결과값을 돌려주는 함수\n",
        "print(eval('1+2'))\n",
        "print(eval(\"'hi' + 'a'\"))\n",
        "print(eval('divmod(4,3)'))"
      ],
      "metadata": {
        "id": "tUK2eQ-c3Wx_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# filter : 첫번째 인수로 함수 이름을, 두번째 인수로 그 함수에 차례로 들어갈 반복가능한 자료형을 받는다\n",
        "# 그리고 두번째 인수인 반복가능한 자료형 요소가 첫번째 인수인 함수에 입력 되었을 때, 반환 값이 참인것만 묶어서 돌려준다.\n",
        "# filter 함수를 쓰지 않는 예\n",
        "def positive(l):\n",
        "    result = []\n",
        "    for i in l:\n",
        "        if i > 0:\n",
        "            result.append(i)\n",
        "    return result\n",
        "\n",
        "print(positive([1, -3, 2, 0, -5, 6]))\n",
        "\n",
        "# filter 사용 예\n",
        "def positive_1(x):\n",
        "    return x > 0\n",
        "\n",
        "print(list(filter(positive_1, [1, -3, 2, 0, -5, 6])))\n",
        "\n",
        "# lambda 함수로 간단하게 filter 사용\n",
        "print(list(filter(lambda x:x > 0, [1, -3, 2, 5, 6, -5, 7])))"
      ],
      "metadata": {
        "id": "7aYHpQUA3k_g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# hex : 정수 값을 입력받아 16진수로 반환하여 돌려주는 함수\n",
        "print(hex(234))\n",
        "print(hex(3))"
      ],
      "metadata": {
        "id": "lEBJa7Em4U_g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# id : 객체를 입력받아 객체의 고유 주소 값을 돌려주는 함수\n",
        "a = 3\n",
        "print(id(3))\n",
        "print(id(a))\n",
        "b = a\n",
        "print(id(b))"
      ],
      "metadata": {
        "id": "Lox17vzaMak_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# input : 사용자 입력을 받는 함수\n",
        "a = input()\n",
        "b = input('Enter: ')\n"
      ],
      "metadata": {
        "id": "xo_HMFA2MizQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# int : 문자열 형태의 숫자나 소수점이 있는 숫자 등을 정수 형태로 돌려주는 함수, 정수를 입력받으면 그대로 돌려준다.\n",
        "print(int('3'))\n",
        "print(int(34))\n",
        "\n",
        "# int(x, radix)는 radix 진수로 표현된 문자열x를 10진수로 변환하여 돌려준다.\n",
        "# ex)2진수로 표현된 11의 10진수 값 int('11', 2)\n",
        "print(int('11', 2))\n",
        "\n",
        "# ex)16진수로 표현된 1A의 10진수 값\n",
        "print(int('1A', 16))"
      ],
      "metadata": {
        "id": "cSL_oxcaMpxx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# isinstance : 입력으로 받은 인스턴스가 그 클래스의 인스턴스 인지를 판단하여 참이면 True, 거짓이면 False를 출력\n",
        "class Person: pass\n",
        "a = Person()\n",
        "\n",
        "print(isinstance(a, Person))\n",
        "\n",
        "print(isinstance(b, Person))"
      ],
      "metadata": {
        "id": "jixhOk60NJ_e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# map : 함수와 iterable 자료형을 입력받는다. map은 입력받은 자료형의 각 요소를 함수 f가 수행한 결과를 묶어서 돌려주는 함수\n",
        "# map함수를 사용하지 않은 경우\n",
        "def two_times(numberList):\n",
        "    result = []\n",
        "    for number in numberList:\n",
        "        result.append(number * 2)\n",
        "    return result\n",
        "\n",
        "result = two_times([1,2,3,4])\n",
        "print(result)\n",
        "\n",
        "# map함수를 사용할 경우\n",
        "def two_times(x):\n",
        "    return x * 2\n",
        "\n",
        "print(list(map(two_times, [1,2,3,4])))\n",
        "\n",
        "# lambda함수 사용\n",
        "\n",
        "print(list(map(lambda a: a * 2, [1,2,3,4])))"
      ],
      "metadata": {
        "id": "uukTWDGVNa-S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# oct : 정수형태의 숫자를 입력받아 8진수 문자열로 바꾸어 반환\n",
        "print(oct(34))\n",
        "print(oct(12345))"
      ],
      "metadata": {
        "id": "eyAVXaygN-WO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# open : '파일이름'과 '읽기방법'을 입력받아 파일 객체를 돌려주는 함수\n",
        "\"\"\"\n",
        "'w' - 쓰기모드\n",
        "'r' - 읽기모드\n",
        "'a' - 추가모드\n",
        "'b' - 바이너리모드\n",
        "* b는 w, r, a와 함께 사용\n",
        "\"\"\""
      ],
      "metadata": {
        "id": "vttstAHINxXS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# pow : x의 y 제곱한 결과값\n",
        "print(pow(2, 4))\n",
        "print(pow(3, 3))"
      ],
      "metadata": {
        "id": "M9Lh0Aqz4L4x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# range : [start], [stop], [step]\n",
        "# 인수가 하나일 경우 - 0부터 시작\n",
        "print(list(range(5)))\n",
        "# 인수가 두개일 경우 - 시작과 끝, 끝 숫자는 범위에 포함되지 않는다.\n",
        "print(list(range(5, 10)))\n",
        "# 인수가 3개일 경우\n",
        "print(list(range(1, 10, 2)))\n",
        "print(list(range(0, -10, -1)))"
      ],
      "metadata": {
        "id": "14V8wlutOlXW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# round : 반올림, 5.678, 2 처럼 입력하면 2자리까지만 반올림하여 표시할 수 있다.\n",
        "print(round(3.155))\n",
        "print(round(3.6))\n",
        "print(round(5.678, 2))\n"
      ],
      "metadata": {
        "id": "39BCl-kRO7jp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# sorted : 입력값을 정렬한 후 그 결과를 리스트로 돌려주는 함수\n",
        "print(sorted([3,1,2]))\n",
        "print(sorted(['a', 'c', 'b']))\n",
        "print(sorted('zero'))"
      ],
      "metadata": {
        "id": "CpO66kLPPP0y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# zip : 동일한 개수로 이루어진 자료형을 묶어준다.\n",
        "print(list(zip([1,2,3], [4,5,6])))\n",
        "print(list(zip([1,2,3], [4,5,6], [7,8,9])))\n",
        "print(list(zip('abc', 'def')))"
      ],
      "metadata": {
        "id": "DABs7Fw2Pk4e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "KYeczgumP335"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}